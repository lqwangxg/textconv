# file.path pattern. 
filefilter: \w+epsDBAccess.js
# available when filefilter is not empty. default false. skip the matched file on true. do replace on false.   
fileSkip: true
# match this pattern after finished replacement, write match.value log for keywords check.
aftercheckpattern: \bDECODE\(.*
rules:
# pattern/replacement group are list. do replacement in sequence.
# Regex.replace(input, pattern, replacement) when pattern matched.
- pattern: document.getElementById
  replacement: getElement
  
- pattern: document.getElementByName
  replacement: getElement
  
# do replacement only when match is between rangeFrom and rangeTo.
# function[UCASE/LCASE are available now.] can be used in match or match.groups. 
- pattern: (?:FROM|UPDATE|DELETE|INSERT\s+INTO)\s+(\w*[a-z]+\w*)\s*\w*\s*(,\s*(\w*[a-z]+\w*)\s*\w*)*
  # replaceResult = Regex.replace(input, pattern, replacement)
  replacement: ""                          
  # when replacement is too long, read from repfile instead of replacement will be convinient.  
  repfile: "c:\replacement.txt"
  # replace match.groups with function. replace object: match.groups[groupindex].value 
  replacegroups:
  - groupindex: 1 
    # replace function: UCASE/LCASE. in the future, will extends functions. 
    function: UCASE
    # if (match.groups.count > groupindex) 
  - groupindex: 3           
    # then groups[3].value = UCASE(groups[3].value)   
    function: UCASE
  # use function on match.value. same as replacegroup's function.  
  function: UCASE
  # rangeFrom/rangeTo are pair pattern for check   
  rangeFrom: \"[^"\n]*\bFROM\b[^"\n]*"  
  rangeTo: \"[^"\n]*\bWHERE\b[^"\n]*" 
  # available when rangeFrom/rangeTo is not empty. default is false on omitted. 
  rangeSkip: false                     
  
# skip the match when it's between rangeFrom and range To. 
# ex. 'if(aaa || bbb){...}' should not be replaced as 'if(aaa + bbb){...}'
- pattern: \|\|  
  replacement: +
  rangeFrom: \s*(if|while)\s*\(	
  rangeTo: \)[^\)\{]*\{	
  rangeSkip: true               
  
# skip the match when any like pattern matched the match.value
# ex. 'if(aaa || bbb){...}' should not be replaced as 'if(aaa + bbb){...}'
- pattern: (fnc_clearLine[^{]+{[^}]+)(})
  replacement: $1  return false;\n    $2
  # skip when return false existed like: fnc_clearLine { .+ \n, return false;} 
  skipMatch:
    # available when patterns.count > 0. default false, for any pattern matched, go.   
    isAnd: false 
    patterns:
    - return false;
    - return false
    
# skip the match when any like pattern matched the input content.
# ex. when not found util.js and found getElementById or getElementByName
#     add "<script src=../util.js /> before <script src=../im_window.js/>  
- pattern: (\s*)(\<script src="csjs\/im_window.js"\>)
  replacement: $1<script src="jae/migration/util.js"></script>$1$2
  # skip replacement pattern: if include in utils.
  skipInput: 
    patterns:
    - src=".+\/migration\/util.js"
    # true: all patterns matched; false: any pattern matched.
    isAnd: true  

  # skip replacement pattern: if include in utils.  
  mustInput:
    patterns:
    - document.getElementById
    - document.getElementByName
    isAnd: false   # true: all patterns matched; false: any pattern matched. 

    